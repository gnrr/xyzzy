初期設定
	git config --global user.name hoge
	git config --global user.email hoge@foo.jp

	git config --global alias.graph "log --graph --date-order --all --pretty=format:'%h %Cred%d %Cgreen%ad %Cblue%cn %Creset%s' --date=short"

	git config --list|grep alias　で確認

テスト用の作業ディレクトリの作成
	mkdir test
	cd test
	git init
	touch hoge.txt
	git status
	git add hoge.txt
	git status
	git commit
	git graph

管理対象のファイルの削除とリネーム
	git rm boo.txt
	git mv wan.txt bow.txt

ブランチ
	git branch			ブランチの一覧
	git checkout -b br1		ブランチ作成と切り替えを同時にやる
	git branch br1		新規ブランチ作成
	git checkout br1		ブランチbr1に切り替え

マージ（br1をmasterにマージする例）
	git checkout master		まずmasterブランチに切り替えて
	git merge --no-ff br1	ブランチbr1をマージ
	git branch -d br1		用済みのブランチを削除

リベース
	git checkout unify_styles
	git rebase master

ローカルリポからリモートリポを作成
	git clone --bare ./test0 X:/AFC機器\(公開\)/repos/test0.git
	mv test0 test0.bak		よけておく
改めてリモートからとってくる
	git clone X:/AFC機器\(公開\)/repos/test0.git ./test0


ログで変更ファイルをリスト
	git log --stat

前のリビジョンに戻す
	git reset --hard COMMIT

タグ
	git tag					タグのリストを表示
	git tag -a v0.1 -m 'for code review 1'	タグの作成
	git tag -d v0.1				削除
	git push origin v0.1				タグをリモートに共有

スタッシュ
	git stash 					スタッシュへ保存しワーキングコピーを触る前に戻す
	git stash list 					リスト表示（数が大きいほうが古い）
	git stash pop stash@{0}				ワーキングコピーにスタッシュから復元

	git stash apply stash@{0}				ワーキングコピーにスタッシュから復元（スタッシュはそのまま残す）
	git stash drop stash@{0}				スタッシュから削除

前のリビジョンのファイルを別名で保存
	git show COMMIT:FILENAME > hoge
	git show HEAD^:FILENAME > hoge			直前のコミット
